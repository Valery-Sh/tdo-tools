
/* The following code was generated by JFlex 1.4.1 on 25.06.07 15:16 */

/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Copyright (C) 1998-2004  Gerwin Klein <lsf@jflex.de>                    *
 * All rights reserved.                                                    *
 *                                                                         *
 * This program is free software; you can redistribute it and/or modify    *
 * it under the terms of the GNU General Public License. See the file      *
 * COPYRIGHT for more information.                                         *
 *                                                                         *
 * This program is distributed in the hope that it will be useful,         *
 * but WITHOUT ANY WARRANTY; without even the implied warranty of          *
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the           *
 * GNU General Public License for more details.                            *
 *                                                                         *
 * You should have received a copy of the GNU General Public License along *
 * with this program; if not, write to the Free Software Foundation, Inc., *
 * 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA                 *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* Java 1.2 language lexer specification */

/* Use together with unicode.flex for Unicode preprocesssing */
/* and java12.cup for a Java 1.2 parser                      */

/* Me 22.08 Note that this lexer specification is not tuned for speed.
   It is in fact quite slow on integer and floating point literals, 
   because the input is read twice and the methods used to parse
   the numbers are not very fast. 
   For a production quality application (e.g. a Java compiler) 
   this could be optimized */

package tdo.tools.scanner;
import tdo.tools.logexpr.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 25.06.07 15:16 from the specification file
 * <tt>c:/jradarsolutions/filis/testflex/flexspec/java.flex</tt>
 */
public class LScanner implements LexConst {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 1;
  public static final int YYINITIAL = 0;
  public static final int BETWEEN_STATE = 2;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\30\1\24\1\2\1\0\1\24\1\1\16\30\4\0\1\24\3\0"+
    "\1\27\2\0\1\62\1\52\1\53\1\26\1\60\1\54\1\40\1\37"+
    "\1\25\1\31\1\34\2\34\4\35\2\32\2\0\1\57\1\55\1\56"+
    "\2\0\1\5\1\13\1\22\1\33\1\14\1\36\1\20\1\23\1\3"+
    "\1\27\1\16\1\12\1\27\1\6\1\7\2\27\1\17\1\4\1\10"+
    "\1\11\1\27\1\15\1\21\2\27\1\0\1\41\2\0\1\27\1\0"+
    "\1\47\1\63\1\22\1\33\1\45\1\46\1\20\1\23\1\3\1\27"+
    "\1\16\1\50\1\27\1\64\1\7\2\27\1\43\1\51\1\42\1\44"+
    "\1\27\1\15\1\21\2\27\1\0\1\61\2\0\41\30\2\0\4\27"+
    "\4\0\1\27\2\0\1\30\7\0\1\27\4\0\1\27\5\0\27\27"+
    "\1\0\37\27\1\0\u013f\27\31\0\162\27\4\0\14\27\16\0\5\27"+
    "\11\0\1\27\21\0\130\30\5\0\23\30\12\0\1\27\13\0\1\27"+
    "\1\0\3\27\1\0\1\27\1\0\24\27\1\0\54\27\1\0\46\27"+
    "\1\0\5\27\4\0\202\27\1\0\4\30\3\0\105\27\1\0\46\27"+
    "\2\0\2\27\6\0\20\27\41\0\46\27\2\0\1\27\7\0\47\27"+
    "\11\0\21\30\1\0\27\30\1\0\3\30\1\0\1\30\1\0\2\30"+
    "\1\0\1\30\13\0\33\27\5\0\3\27\15\0\4\30\14\0\6\30"+
    "\13\0\32\27\5\0\13\27\16\30\7\0\12\30\4\0\2\27\1\30"+
    "\143\27\1\0\1\27\10\30\1\0\6\30\2\27\2\30\1\0\4\30"+
    "\2\27\12\30\3\27\2\0\1\27\17\0\1\30\1\27\1\30\36\27"+
    "\33\30\2\0\3\27\60\0\46\27\13\30\1\27\u014f\0\3\30\66\27"+
    "\2\0\1\30\1\27\20\30\2\0\1\27\4\30\3\0\12\27\2\30"+
    "\2\0\12\30\21\0\3\30\1\0\10\27\2\0\2\27\2\0\26\27"+
    "\1\0\7\27\1\0\1\27\3\0\4\27\2\0\1\30\1\27\7\30"+
    "\2\0\2\30\2\0\3\30\11\0\1\30\4\0\2\27\1\0\3\27"+
    "\2\30\2\0\12\30\4\27\15\0\3\30\1\0\6\27\4\0\2\27"+
    "\2\0\26\27\1\0\7\27\1\0\2\27\1\0\2\27\1\0\2\27"+
    "\2\0\1\30\1\0\5\30\4\0\2\30\2\0\3\30\13\0\4\27"+
    "\1\0\1\27\7\0\14\30\3\27\14\0\3\30\1\0\11\27\1\0"+
    "\3\27\1\0\26\27\1\0\7\27\1\0\2\27\1\0\5\27\2\0"+
    "\1\30\1\27\10\30\1\0\3\30\1\0\3\30\2\0\1\27\17\0"+
    "\2\27\2\30\2\0\12\30\1\0\1\27\17\0\3\30\1\0\10\27"+
    "\2\0\2\27\2\0\26\27\1\0\7\27\1\0\2\27\1\0\5\27"+
    "\2\0\1\30\1\27\6\30\3\0\2\30\2\0\3\30\10\0\2\30"+
    "\4\0\2\27\1\0\3\27\4\0\12\30\1\0\1\27\20\0\1\30"+
    "\1\27\1\0\6\27\3\0\3\27\1\0\4\27\3\0\2\27\1\0"+
    "\1\27\1\0\2\27\3\0\2\27\3\0\3\27\3\0\10\27\1\0"+
    "\3\27\4\0\5\30\3\0\3\30\1\0\4\30\11\0\1\30\17\0"+
    "\11\30\11\0\1\27\7\0\3\30\1\0\10\27\1\0\3\27\1\0"+
    "\27\27\1\0\12\27\1\0\5\27\4\0\7\30\1\0\3\30\1\0"+
    "\4\30\7\0\2\30\11\0\2\27\4\0\12\30\22\0\2\30\1\0"+
    "\10\27\1\0\3\27\1\0\27\27\1\0\12\27\1\0\5\27\2\0"+
    "\1\30\1\27\7\30\1\0\3\30\1\0\4\30\7\0\2\30\7\0"+
    "\1\27\1\0\2\27\4\0\12\30\22\0\2\30\1\0\10\27\1\0"+
    "\3\27\1\0\27\27\1\0\20\27\4\0\6\30\2\0\3\30\1\0"+
    "\4\30\11\0\1\30\10\0\2\27\4\0\12\30\22\0\2\30\1\0"+
    "\22\27\3\0\30\27\1\0\11\27\1\0\1\27\2\0\7\27\3\0"+
    "\1\30\4\0\6\30\1\0\1\30\1\0\10\30\22\0\2\30\15\0"+
    "\60\27\1\30\2\27\7\30\4\0\10\27\10\30\1\0\12\30\47\0"+
    "\2\27\1\0\1\27\2\0\2\27\1\0\1\27\2\0\1\27\6\0"+
    "\4\27\1\0\7\27\1\0\3\27\1\0\1\27\1\0\1\27\2\0"+
    "\2\27\1\0\4\27\1\30\2\27\6\30\1\0\2\30\1\27\2\0"+
    "\5\27\1\0\1\27\1\0\6\30\2\0\12\30\2\0\2\27\42\0"+
    "\1\27\27\0\2\30\6\0\12\30\13\0\1\30\1\0\1\30\1\0"+
    "\1\30\4\0\2\30\10\27\1\0\42\27\6\0\24\30\1\0\2\30"+
    "\4\27\4\0\10\30\1\0\44\30\11\0\1\30\71\0\42\27\1\0"+
    "\5\27\1\0\2\27\1\0\7\30\3\0\4\30\6\0\12\30\6\0"+
    "\6\27\4\30\106\0\46\27\12\0\51\27\7\0\132\27\5\0\104\27"+
    "\5\0\122\27\6\0\7\27\1\0\77\27\1\0\1\27\1\0\4\27"+
    "\2\0\7\27\1\0\1\27\1\0\4\27\2\0\47\27\1\0\1\27"+
    "\1\0\4\27\2\0\37\27\1\0\1\27\1\0\4\27\2\0\7\27"+
    "\1\0\1\27\1\0\4\27\2\0\7\27\1\0\7\27\1\0\27\27"+
    "\1\0\37\27\1\0\1\27\1\0\4\27\2\0\7\27\1\0\47\27"+
    "\1\0\23\27\16\0\11\30\56\0\125\27\14\0\u026c\27\2\0\10\27"+
    "\12\0\32\27\5\0\113\27\3\0\3\27\17\0\15\27\1\0\4\27"+
    "\3\30\13\0\22\27\3\30\13\0\22\27\2\30\14\0\15\27\1\0"+
    "\3\27\1\0\2\30\14\0\64\27\40\30\3\0\1\27\3\0\2\27"+
    "\1\30\2\0\12\30\41\0\3\30\2\0\12\30\6\0\130\27\10\0"+
    "\51\27\1\30\126\0\35\27\3\0\14\30\4\0\14\30\12\0\12\30"+
    "\36\27\2\0\5\27\u038b\0\154\27\224\0\234\27\4\0\132\27\6\0"+
    "\26\27\2\0\6\27\2\0\46\27\2\0\6\27\2\0\10\27\1\0"+
    "\1\27\1\0\1\27\1\0\1\27\1\0\37\27\2\0\65\27\1\0"+
    "\7\27\1\0\1\27\3\0\3\27\1\0\7\27\3\0\4\27\2\0"+
    "\6\27\4\0\15\27\5\0\3\27\1\0\7\27\17\0\4\30\32\0"+
    "\5\30\20\0\2\27\23\0\1\27\13\0\4\30\6\0\6\30\1\0"+
    "\1\27\15\0\1\27\40\0\22\27\36\0\15\30\4\0\1\30\3\0"+
    "\6\30\27\0\1\27\4\0\1\27\2\0\12\27\1\0\1\27\3\0"+
    "\5\27\6\0\1\27\1\0\1\27\1\0\1\27\1\0\4\27\1\0"+
    "\3\27\1\0\7\27\3\0\3\27\5\0\5\27\26\0\44\27\u0e81\0"+
    "\3\27\31\0\11\27\6\30\1\0\5\27\2\0\5\27\4\0\126\27"+
    "\2\0\2\30\2\0\3\27\1\0\137\27\5\0\50\27\4\0\136\27"+
    "\21\0\30\27\70\0\20\27\u0200\0\u19b6\27\112\0\u51a6\27\132\0\u048d\27"+
    "\u0773\0\u2ba4\27\u215c\0\u012e\27\2\0\73\27\225\0\7\27\14\0\5\27"+
    "\5\0\1\27\1\30\12\27\1\0\15\27\1\0\5\27\1\0\1\27"+
    "\1\0\2\27\1\0\2\27\1\0\154\27\41\0\u016b\27\22\0\100\27"+
    "\2\0\66\27\50\0\15\27\3\0\20\30\20\0\4\30\17\0\2\27"+
    "\30\0\3\27\31\0\1\27\6\0\5\27\1\0\207\27\2\0\1\30"+
    "\4\0\1\27\13\0\12\30\7\0\32\27\4\0\1\27\1\0\32\27"+
    "\12\0\132\27\3\0\6\27\2\0\6\27\2\0\6\27\2\0\3\27"+
    "\3\0\2\27\3\0\2\27\22\0\3\30\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\12\3\1\4\1\5\2\6\1\7"+
    "\1\10\2\3\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\1\1\20\1\21\2\22\1\1\1\23\1\24"+
    "\1\25\1\3\1\26\3\3\1\27\4\3\1\30\1\0"+
    "\1\31\1\32\1\33\1\31\2\3\1\34\1\35\1\36"+
    "\1\37\1\40\2\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\0\1\3\1\51\1\52\5\3\1\31"+
    "\1\0\2\3\1\41\1\0\1\3\1\0\1\53\1\54"+
    "\3\3\1\55\1\3\1\0\1\3\6\0\1\3\1\56"+
    "\1\3\1\57\1\60\1\3\1\61\5\0\3\3\5\0"+
    "\1\62\1\3\1\63\1\0\1\64\3\0\1\3\3\0"+
    "\1\65\1\0\1\3\4\0\1\66\2\0\1\67\2\0"+
    "\1\70\1\0\1\63\3\0\1\71\2\0\1\70";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\324\0\237\0\u0109\0\u013e"+
    "\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1\0\u02e6"+
    "\0\237\0\237\0\u031b\0\u0350\0\u0385\0\237\0\u03ba\0\u03ef"+
    "\0\237\0\237\0\237\0\237\0\u0424\0\u0459\0\237\0\u048e"+
    "\0\237\0\u04c3\0\u04f8\0\237\0\u052d\0\237\0\u0562\0\u0212"+
    "\0\u0597\0\u0212\0\u05cc\0\u0601\0\u0636\0\u0212\0\u066b\0\u06a0"+
    "\0\u06d5\0\u070a\0\237\0\u073f\0\u0774\0\237\0\237\0\u07a9"+
    "\0\u07de\0\u0813\0\237\0\237\0\237\0\237\0\237\0\u0848"+
    "\0\u087d\0\237\0\237\0\237\0\237\0\237\0\237\0\237"+
    "\0\u08b2\0\u08e7\0\u0212\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\u0a8f\0\u0ac4\0\u0af9\0\237\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\u0212\0\u0212\0\u0bcd\0\u0c02\0\u0c37\0\u0212\0\u0c6c"+
    "\0\u0ca1\0\u0cd6\0\u0d0b\0\u0d40\0\u0d75\0\u0daa\0\u0ddf\0\u0e14"+
    "\0\u0e49\0\u0212\0\u0e7e\0\u0212\0\237\0\u0eb3\0\237\0\u0ee8"+
    "\0\u0f1d\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026\0\u105b\0\u1090"+
    "\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u0212\0\u1199\0\u11ce\0\u1203"+
    "\0\237\0\u1238\0\u126d\0\u12a2\0\u12d7\0\u130c\0\u1341\0\u1376"+
    "\0\237\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f\0\u14b4\0\u0212"+
    "\0\u14e9\0\u151e\0\237\0\u1553\0\u1588\0\u15bd\0\u15f2\0\237"+
    "\0\u1627\0\u165c\0\u1691\0\237\0\u16c6\0\u16fb\0\237";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\2\14\1\15\1\16\3\14\1\17\2\14\1\20\1\14"+
    "\1\6\1\21\1\22\1\14\1\4\1\23\1\24\1\14"+
    "\2\24\1\14\1\25\1\26\1\4\1\27\1\17\2\14"+
    "\1\30\1\11\1\15\1\10\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\16\1\12\1\42"+
    "\1\43\1\44\36\42\1\45\20\42\1\46\2\42\65\4"+
    "\67\0\1\6\65\0\1\14\1\47\1\14\1\50\15\14"+
    "\3\0\10\14\3\0\7\14\1\47\11\0\1\14\1\50"+
    "\3\0\5\14\1\51\13\14\3\0\10\14\3\0\1\51"+
    "\7\14\11\0\2\14\3\0\1\14\1\52\1\14\1\53"+
    "\15\14\3\0\10\14\3\0\7\14\1\52\11\0\1\14"+
    "\1\53\3\0\4\14\1\54\1\14\1\55\12\14\3\0"+
    "\10\14\3\0\2\14\1\55\5\14\11\0\2\14\3\0"+
    "\14\14\1\56\4\14\3\0\10\14\3\0\1\14\1\56"+
    "\6\14\11\0\2\14\3\0\21\14\3\0\10\14\3\0"+
    "\10\14\11\0\2\14\3\0\1\57\20\14\3\0\10\14"+
    "\3\0\10\14\11\0\2\14\3\0\11\14\1\60\7\14"+
    "\3\0\10\14\3\0\3\14\1\60\4\14\11\0\2\14"+
    "\3\0\11\14\1\61\7\14\3\0\10\14\3\0\3\14"+
    "\1\61\4\14\11\0\2\14\3\0\4\14\1\62\14\14"+
    "\3\0\10\14\3\0\10\14\11\0\2\14\12\0\1\63"+
    "\1\0\1\64\14\0\2\65\1\66\2\65\1\67\1\70"+
    "\5\0\1\64\1\67\1\0\1\63\26\0\1\63\1\0"+
    "\1\64\14\0\2\24\1\66\2\24\1\67\1\70\5\0"+
    "\1\64\1\67\1\0\1\63\45\0\2\70\1\0\2\70"+
    "\32\0\21\14\3\0\10\14\3\0\1\14\1\71\6\14"+
    "\11\0\2\14\3\0\21\14\3\0\10\14\3\0\5\14"+
    "\1\72\2\14\11\0\2\14\55\0\1\73\64\0\1\74"+
    "\1\75\67\0\1\76\3\0\1\42\2\0\36\42\1\0"+
    "\20\42\1\0\2\42\2\0\1\44\62\0\2\77\1\0"+
    "\26\77\1\100\2\77\1\100\1\101\3\77\1\102\1\103"+
    "\1\104\2\77\1\105\13\77\1\106\1\107\1\110\1\0"+
    "\2\111\21\14\1\111\2\0\10\14\3\0\10\14\11\0"+
    "\2\14\3\0\2\14\1\112\16\14\3\0\10\14\3\0"+
    "\5\14\1\112\2\14\11\0\2\14\3\0\21\14\3\0"+
    "\4\14\1\113\3\14\3\0\10\14\11\0\2\14\3\0"+
    "\5\14\1\114\13\14\3\0\10\14\3\0\1\114\7\14"+
    "\11\0\2\14\3\0\7\14\1\115\11\14\3\0\10\14"+
    "\3\0\6\14\1\115\1\14\11\0\2\14\3\0\13\14"+
    "\1\116\5\14\3\0\10\14\3\0\10\14\11\0\2\14"+
    "\3\0\5\14\1\117\13\14\3\0\10\14\3\0\1\117"+
    "\7\14\11\0\2\14\3\0\15\14\1\120\3\14\3\0"+
    "\10\14\3\0\10\14\11\0\2\14\3\0\3\14\1\121"+
    "\15\14\3\0\10\14\3\0\10\14\11\0\1\14\1\121"+
    "\31\0\2\122\1\0\2\122\2\0\1\123\17\0\1\123"+
    "\20\0\1\64\14\0\2\65\1\66\2\65\1\67\1\70"+
    "\5\0\1\64\1\67\32\0\1\64\14\0\2\70\1\66"+
    "\2\70\1\67\6\0\1\64\1\67\21\0\21\14\3\0"+
    "\10\14\3\0\2\14\1\124\5\14\11\0\2\14\3\0"+
    "\21\14\3\0\10\14\3\0\6\14\1\125\1\14\11\0"+
    "\2\14\31\0\1\101\2\0\2\101\60\0\1\126\2\0"+
    "\2\126\30\0\2\111\3\0\1\127\15\0\1\111\37\0"+
    "\1\127\3\0\14\14\1\130\4\14\3\0\10\14\3\0"+
    "\1\14\1\130\6\14\11\0\2\14\1\0\2\131\21\14"+
    "\1\131\2\0\10\14\3\0\10\14\11\0\2\14\3\0"+
    "\7\14\1\132\11\14\3\0\10\14\3\0\6\14\1\132"+
    "\1\14\11\0\2\14\3\0\11\14\1\133\7\14\3\0"+
    "\10\14\3\0\3\14\1\133\4\14\11\0\2\14\3\0"+
    "\12\14\1\134\6\14\3\0\10\14\3\0\10\14\11\0"+
    "\2\14\3\0\11\14\1\135\7\14\3\0\10\14\3\0"+
    "\3\14\1\135\4\14\11\0\2\14\3\0\5\14\1\136"+
    "\13\14\3\0\10\14\3\0\1\136\7\14\11\0\2\14"+
    "\31\0\2\122\1\66\2\122\1\67\7\0\1\67\47\0"+
    "\2\122\1\0\2\122\32\0\21\14\3\0\10\14\3\0"+
    "\3\14\1\137\4\14\11\0\2\14\3\0\21\14\3\0"+
    "\10\14\3\0\7\14\1\140\11\0\2\14\7\0\1\141"+
    "\60\0\5\14\1\142\13\14\3\0\10\14\3\0\1\142"+
    "\7\14\11\0\2\14\1\0\2\131\1\143\1\144\5\0"+
    "\1\145\1\146\3\0\1\147\2\0\1\150\1\0\1\131"+
    "\16\0\1\147\4\0\1\145\1\144\11\0\1\146\4\0"+
    "\11\14\1\151\7\14\3\0\10\14\3\0\3\14\1\151"+
    "\4\14\11\0\2\14\3\0\16\14\1\152\2\14\3\0"+
    "\10\14\3\0\10\14\11\0\2\14\3\0\2\14\1\153"+
    "\16\14\3\0\10\14\3\0\5\14\1\153\2\14\11\0"+
    "\2\14\3\0\21\14\3\0\10\14\3\0\3\14\1\154"+
    "\4\14\11\0\2\14\10\0\1\155\31\0\1\155\25\0"+
    "\1\156\20\14\3\0\10\14\3\0\10\14\11\0\2\14"+
    "\6\0\1\157\55\0\1\157\10\0\1\160\31\0\1\160"+
    "\25\0\1\161\75\0\1\162\30\0\1\162\33\0\1\163"+
    "\30\0\1\163\26\0\1\164\60\0\11\14\1\165\7\14"+
    "\3\0\10\14\3\0\3\14\1\165\4\14\11\0\2\14"+
    "\3\0\1\166\20\14\3\0\10\14\3\0\10\14\11\0"+
    "\2\14\3\0\3\14\1\167\15\14\3\0\10\14\3\0"+
    "\10\14\11\0\1\14\1\167\5\0\1\170\41\0\1\170"+
    "\33\0\1\171\56\0\1\172\31\0\1\172\42\0\1\173"+
    "\52\0\1\174\55\0\1\174\3\0\3\14\1\175\15\14"+
    "\3\0\10\14\3\0\10\14\11\0\1\14\1\175\3\0"+
    "\3\14\1\176\15\14\3\0\10\14\3\0\10\14\11\0"+
    "\1\14\1\176\3\0\15\14\1\177\3\14\3\0\10\14"+
    "\3\0\10\14\11\0\2\14\17\0\1\200\23\0\1\200"+
    "\35\0\1\201\30\0\1\201\34\0\1\202\63\0\1\203"+
    "\30\0\1\203\27\0\1\204\31\0\1\204\25\0\1\205"+
    "\20\14\3\0\10\14\3\0\10\14\11\0\2\14\1\0"+
    "\2\206\21\14\1\206\2\0\10\14\3\0\10\14\11\0"+
    "\2\14\10\0\1\207\31\0\1\207\36\0\1\210\30\0"+
    "\1\210\40\0\1\211\50\0\1\212\41\0\1\212\20\0"+
    "\3\14\1\213\15\14\3\0\10\14\3\0\10\14\11\0"+
    "\1\14\1\213\1\0\2\206\12\0\1\214\6\0\1\206"+
    "\43\0\1\215\75\0\1\216\30\0\1\216\22\0\1\217"+
    "\64\0\15\14\1\220\3\14\3\0\10\14\3\0\10\14"+
    "\11\0\2\14\3\0\1\221\67\0\1\222\55\0\1\222"+
    "\6\0\1\223\55\0\1\223\6\0\1\224\55\0\1\224"+
    "\10\0\1\225\31\0\1\225\42\0\1\226\47\0\1\227"+
    "\104\0\1\230\42\0\2\231\21\0\1\231\46\0\1\232"+
    "\55\0\1\232\1\0\2\231\12\0\1\233\6\0\1\231"+
    "\60\0\1\234\47\0\1\235\71\0\1\236\31\0\1\236"+
    "\45\0\1\237\41\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5936];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\1\11\12\1\2\11\3\1\1\11"+
    "\2\1\4\11\2\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\14\1\1\11\1\0\1\1\2\11\3\1"+
    "\5\11\2\1\7\11\1\0\11\1\1\0\2\1\1\11"+
    "\1\0\1\1\1\0\7\1\1\0\1\1\6\0\4\1"+
    "\1\11\1\1\1\11\5\0\3\1\5\0\3\1\1\0"+
    "\1\11\3\0\1\1\3\0\1\11\1\0\1\1\4\0"+
    "\1\1\2\0\1\11\2\0\1\1\1\0\1\11\3\0"+
    "\1\11\2\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


  StringBuffer string = new StringBuffer();
  
  private Symbol symbol(int type) {
    return new Symbol(type, yyline+1, yycolumn+1);
  }

  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline+1, yycolumn+1, value);
  }

  /** 
   * assumes correct representation of a long value for 
   * specified radix in scanner buffer from <code>start</code> 
   * to <code>end</code> 
   */
  private long parseLong(int start, int end, int radix) {
    long result = 0;
    long digit;

    for (int i = start; i < end; i++) {
      digit  = Character.digit(yycharat(i),radix);
      result*= radix;
      result+= digit;
    }

    return result;
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public LScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public LScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1794) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public tdo.tools.logexpr.Symbol nextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { /* ignore */
          }
        case 58: break;
        case 25: 
          { return symbol(FLOATING_POINT_LITERAL, new Double(yytext()));
          }
        case 59: break;
        case 20: 
          { return symbol(ISNULL);
          }
        case 60: break;
        case 13: 
          { return symbol(GT);
          }
        case 61: break;
        case 31: 
          { return symbol(CONCAT);
          }
        case 62: break;
        case 37: 
          { string.append( '\f' );
          }
        case 63: break;
        case 8: 
          { return symbol(MINUS);
          }
        case 64: break;
        case 14: 
          { return symbol(LT);
          }
        case 65: break;
        case 52: 
          { return symbol(NOTLIKE);
          }
        case 66: break;
        case 49: 
          { return symbol(NOTIN);
          }
        case 67: break;
        case 39: 
          { string.append( '\b' );
          }
        case 68: break;
        case 7: 
          { return symbol(DOT);
          }
        case 69: break;
        case 30: 
          { return symbol(NOTEQ);
          }
        case 70: break;
        case 6: 
          { return symbol(INTEGER_LITERAL, new Integer(yytext()));
          }
        case 71: break;
        case 15: 
          { return symbol(PLUS);
          }
        case 72: break;
        case 11: 
          { return symbol(COMMA);
          }
        case 73: break;
        case 35: 
          { string.append( '\t' );
          }
        case 74: break;
        case 47: 
          { return symbol(BOOLEAN_LITERAL, new Boolean(false));
          }
        case 75: break;
        case 9: 
          { return symbol(LPAREN);
          }
        case 76: break;
        case 43: 
          { return symbol(NULL_LITERAL);
          }
        case 77: break;
        case 38: 
          { string.append( '\'' );
          }
        case 78: break;
        case 56: 
          { return symbol(NOTSTARTINGWITH);
          }
        case 79: break;
        case 5: 
          { return symbol(MULT);
          }
        case 80: break;
        case 33: 
          { char val = (char) Integer.parseInt(yytext().substring(1),8);
                        				   string.append( val );
          }
        case 81: break;
        case 18: 
          { throw new RuntimeException("Unterminated string at end of line");
          }
        case 82: break;
        case 57: 
          { return symbol(NOTCONTAINING);
          }
        case 83: break;
        case 42: 
          { return symbol(NOT);
          }
        case 84: break;
        case 41: 
          { return symbol(AND);
          }
        case 85: break;
        case 3: 
          { return symbol(IDENTIFIER, yytext());
          }
        case 86: break;
        case 44: 
          { return symbol(LIKE);
          }
        case 87: break;
        case 4: 
          { return symbol(DIV);
          }
        case 88: break;
        case 24: 
          { return symbol(INTEGER_LITERAL, new Long(yytext().substring(0,yylength()-1)));
          }
        case 89: break;
        case 53: 
          { return symbol(NOTREGEX);
          }
        case 90: break;
        case 50: 
          { return symbol(BETWEEN);
          }
        case 91: break;
        case 23: 
          { return symbol(OR);
          }
        case 92: break;
        case 21: 
          { return symbol(IN);
          }
        case 93: break;
        case 12: 
          { return symbol(EQ);
          }
        case 94: break;
        case 29: 
          { return symbol(LTEQ);
          }
        case 95: break;
        case 22: 
          { return symbol(AS);
          }
        case 96: break;
        case 48: 
          { return symbol(ISNOTNULL);
          }
        case 97: break;
        case 45: 
          { return symbol(BOOLEAN_LITERAL, new Boolean(true));
          }
        case 98: break;
        case 10: 
          { return symbol(RPAREN);
          }
        case 99: break;
        case 51: 
          { return symbol(STARTINGWITH);
          }
        case 100: break;
        case 46: 
          { return symbol(REGEX);
          }
        case 101: break;
        case 36: 
          { string.append( '\r' );
          }
        case 102: break;
        case 16: 
          { yybegin(STRING); string.setLength(0);
          }
        case 103: break;
        case 34: 
          { string.append( '\\' );
          }
        case 104: break;
        case 1: 
          { throw new RuntimeException("Illegal character \""+yytext()+
                                                              "\" at line "+yyline+", column "+yycolumn);
          }
        case 105: break;
        case 40: 
          { string.append( '\n' );
          }
        case 106: break;
        case 19: 
          { yybegin(YYINITIAL); return symbol(STRING_LITERAL, string.toString());
          }
        case 107: break;
        case 26: 
          { return symbol(FLOATING_POINT_LITERAL, new Double(yytext().substring(0,yylength()-1)));
          }
        case 108: break;
        case 54: 
          { return symbol(CONTAINING);
          }
        case 109: break;
        case 17: 
          { string.append( yytext() );
          }
        case 110: break;
        case 27: 
          { return symbol(FLOATING_POINT_LITERAL, new Float(yytext().substring(0,yylength()-1)));
          }
        case 111: break;
        case 32: 
          { throw new RuntimeException("Illegal escape sequence \""+yytext()+"\"");
          }
        case 112: break;
        case 55: 
          { return symbol(NOTBETWEEN);
          }
        case 113: break;
        case 28: 
          { return symbol(GTEQ);
          }
        case 114: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return symbol(EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
